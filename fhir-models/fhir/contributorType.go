// Copyright 2019 - 2022 The Samply Community
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package fhir

import (
	"encoding/json"
	"fmt"
	bson "go.mongodb.org/mongo-driver/bson"
	bsonrw "go.mongodb.org/mongo-driver/bson/bsonrw"
	bsontype "go.mongodb.org/mongo-driver/bson/bsontype"
	"strings"
)

// THIS FILE IS GENERATED BY https://github.com/samply/golang-fhir-models
// PLEASE DO NOT EDIT BY HAND

// ContributorType is documented here http://hl7.org/fhir/ValueSet/contributor-type
type ContributorType int

const (
	ContributorTypeAuthor ContributorType = iota
	ContributorTypeEditor
	ContributorTypeReviewer
	ContributorTypeEndorser
)

func (code *ContributorType) MarshalBSONValue() (bsontype.Type, []byte, error) {
	return bson.MarshalValue(code.Code())
}
func (code *ContributorType) UnmarshalBSONValue(t bsontype.Type, bytes []byte) error {
	if t != bsontype.String {
		err := fmt.Errorf("UnmarshalBSONValue error: cannot unmarshal non string value")
		return err
	}
	reader := bsonrw.NewBSONValueReader(t, bytes)
	decoder, err := bson.NewDecoder(reader)
	if err != nil {
		return err
	}
	var s string
	err = decoder.Decode(&s)
	if err != nil {
		return err
	}
	switch s {
	case "author":
		*code = ContributorTypeAuthor
	case "editor":
		*code = ContributorTypeEditor
	case "reviewer":
		*code = ContributorTypeReviewer
	case "endorser":
		*code = ContributorTypeEndorser
	default:
		return fmt.Errorf("unknown ContributorType code `%s`", s)
	}
	return nil
}
func (code *ContributorType) MarshalJSON() ([]byte, error) {
	return json.Marshal(code.Code())
}
func (code *ContributorType) UnmarshalJSON(json []byte) error {
	s := strings.Trim(string(json), "\"")
	switch s {
	case "author":
		*code = ContributorTypeAuthor
	case "editor":
		*code = ContributorTypeEditor
	case "reviewer":
		*code = ContributorTypeReviewer
	case "endorser":
		*code = ContributorTypeEndorser
	default:
		return fmt.Errorf("unknown ContributorType code `%s`", s)
	}
	return nil
}
func (code ContributorType) String() string {
	return code.Code()
}
func (code ContributorType) Code() string {
	switch code {
	case ContributorTypeAuthor:
		return "author"
	case ContributorTypeEditor:
		return "editor"
	case ContributorTypeReviewer:
		return "reviewer"
	case ContributorTypeEndorser:
		return "endorser"
	}
	return "<unknown>"
}
func (code ContributorType) Display() string {
	switch code {
	case ContributorTypeAuthor:
		return "Author"
	case ContributorTypeEditor:
		return "Editor"
	case ContributorTypeReviewer:
		return "Reviewer"
	case ContributorTypeEndorser:
		return "Endorser"
	}
	return "<unknown>"
}
func (code ContributorType) Definition() string {
	switch code {
	case ContributorTypeAuthor:
		return "An author of the content of the module."
	case ContributorTypeEditor:
		return "An editor of the content of the module."
	case ContributorTypeReviewer:
		return "A reviewer of the content of the module."
	case ContributorTypeEndorser:
		return "An endorser of the content of the module."
	}
	return "<unknown>"
}
